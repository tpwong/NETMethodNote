我將簡化 CSV 輸出，只保留四個欄位：時間、進程名稱、CPU 百分比和記憶體百分比。以下是更新的 ReportManager.cs 代碼：

```csharp
using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Collections.Generic;
using System.Globalization;

namespace ProcessMonitor
{
    /// <summary>
    /// Responsible for handling output of monitoring reports
    /// </summary>
    public class ReportManager
    {
        // Keep track of when we last cleaned up old logs
        private static DateTime _lastLogCleanupTime = DateTime.MinValue;
        
        /// <summary>
        /// Output a monitoring report to configured destinations
        /// </summary>
        /// <param name="processResources">The list of process resources to output</param>
        /// <param name="timestamp">Timestamp for the report</param>
        /// <param name="cancellationToken">Cancellation token</param>
        public async Task OutputReportAsync(List<ProcessResourceInfo> processResources, 
                                           DateTime timestamp, 
                                           CancellationToken cancellationToken)
        {
            // Create simplified CSV report
            string csvReport = GenerateSimplifiedCSVReport(processResources, timestamp);
            
            // Output to console if configured
            if (ConfigurationManager.OutputToConsole)
            {
                OutputToConsole(csvReport);
            }
            
            // Output to file if configured
            if (ConfigurationManager.OutputToFile)
            {
                await OutputToFileAsync(csvReport, timestamp, cancellationToken);
                
                // Clean up old log files once per day
                if ((DateTime.Now - _lastLogCleanupTime).TotalHours >= 24)
                {
                    await CleanupOldLogsAsync(cancellationToken);
                    _lastLogCleanupTime = DateTime.Now;
                }
            }
        }
        
        /// <summary>
        /// Generates a simplified CSV report with only 4 columns: time, process name, CPU%, memory%
        /// </summary>
        private string GenerateSimplifiedCSVReport(List<ProcessResourceInfo> processResources, DateTime timestamp)
        {
            StringBuilder csv = new StringBuilder();
            
            // Get the timestamp as string
            string timeString = timestamp.ToString("yyyy-MM-dd HH:mm:ss");
            
            // Sort processes by CPU usage and take top N
            var topProcesses = processResources
                .OrderByDescending(p => p.CpuUsage)
                .Take(ConfigurationManager.ProcessCount)
                .ToList();
            
            // Add header row only if we're creating a new file
            string filePath = Path.Combine(
                ConfigurationManager.LogFolderPath, 
                $"ProcessMonitor_{timestamp.ToString("yyyy-MM-dd")}.csv");
                
            bool isNewFile = !File.Exists(filePath) || new FileInfo(filePath).Length == 0;
            
            if (isNewFile)
            {
                csv.AppendLine("Time,ProcessName,CPU%,Memory%");
            }
            
            // Add each process data row
            foreach (var proc in topProcesses)
            {
                csv.AppendLine(
                    $"{timeString}," +
                    $"{EscapeCSV(proc.ProcessName)}," +
                    $"{proc.CpuUsage.ToString("F2", CultureInfo.InvariantCulture)}," +
                    $"{proc.MemoryUsagePercent.ToString("F2", CultureInfo.InvariantCulture)}");
            }
            
            return csv.ToString();
        }
        
        /// <summary>
        /// Escape a string for CSV format
        /// </summary>
        private string EscapeCSV(string field)
        {
            if (string.IsNullOrEmpty(field))
                return string.Empty;
                
            // If the field contains a comma, newline, or quote, wrap it in quotes
            if (field.Contains(",") || field.Contains("\"") || field.Contains("\r") || field.Contains("\n"))
            {
                // Replace any quotes with double quotes
                field = field.Replace("\"", "\"\"");
                
                // Wrap the field in quotes
                return $"\"{field}\"";
            }
            
            return field;
        }
        
        /// <summary>
        /// Output the report to the console
        /// </summary>
        private void OutputToConsole(string reportText)
        {
            try
            {
                Console.Clear();
                Console.WriteLine("Process Resource Monitor - Top Processes");
                Console.WriteLine($"Time: {DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}");
                Console.WriteLine("--------------------------------------------------");
                Console.WriteLine("Process Name                   CPU%      Memory%");
                Console.WriteLine("--------------------------------------------------");
                
                // Parse and format the CSV data for better console display
                var lines = reportText.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                foreach (var line in lines)
                {
                    // Skip the header line
                    if (line.StartsWith("Time,") || line.Length == 0)
                        continue;
                        
                    string[] parts = line.Split(',');
                    if (parts.Length >= 4)
                    {
                        // Format: ProcessName, CPU%, Memory%
                        string processName = parts[1];
                        string cpu = parts[2];
                        string memory = parts[3];
                        
                        // Remove quotes if present
                        if (processName.StartsWith("\"") && processName.EndsWith("\""))
                            processName = processName.Substring(1, processName.Length - 2);
                            
                        Console.WriteLine($"{processName.PadRight(30)} {cpu.PadRight(10)} {memory}");
                    }
                }
                
                Console.WriteLine("--------------------------------------------------");
                Console.WriteLine($"Next update in {ConfigurationManager.MonitorIntervalSeconds} seconds");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error writing to console: {ex.Message}");
            }
        }
        
        /// <summary>
        /// Output the report to a CSV file
        /// </summary>
        private async Task OutputToFileAsync(string reportText, DateTime timestamp, CancellationToken cancellationToken)
        {
            try
            {
                // Ensure log directory exists
                if (!Directory.Exists(ConfigurationManager.LogFolderPath))
                {
                    try
                    {
                        Directory.CreateDirectory(ConfigurationManager.LogFolderPath);
                        Console.WriteLine($"Created log directory: {ConfigurationManager.LogFolderPath}");
                    }
                    catch (Exception dirEx)
                    {
                        Console.WriteLine($"Failed to create log directory: {dirEx.Message}");
                        return; // Cannot proceed without a log directory
                    }
                }
                
                // Create timestamped filename with CSV extension
                string filename = $"ProcessMonitor_{timestamp.ToString("yyyy-MM-dd")}.csv";
                string filePath = Path.Combine(ConfigurationManager.LogFolderPath, filename);
                
                // Write to the file, appending the report
                using (StreamWriter writer = new StreamWriter(filePath, true, Encoding.UTF8))
                {
                    await writer.WriteAsync(reportText);
                    await writer.FlushAsync();
                }
                
                Console.WriteLine($"Report saved to: {filePath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error writing report to file: {ex.Message}");
            }
        }
        
        /// <summary>
        /// Clean up CSV files older than the retention period
        /// </summary>
        private async Task CleanupOldLogsAsync(CancellationToken cancellationToken)
        {
            try
            {
                // Calculate the cutoff date for log retention
                DateTime cutoffDate = DateTime.Now.AddDays(-ConfigurationManager.LogRetentionDays);
                
                // Get all CSV files
                DirectoryInfo logDir = new DirectoryInfo(ConfigurationManager.LogFolderPath);
                if (!logDir.Exists)
                    return;
                
                // Find files older than the cutoff date
                var oldFiles = logDir.GetFiles("ProcessMonitor_*.csv")
                    .Where(f => f.LastWriteTime < cutoffDate)
                    .ToList();
                
                if (oldFiles.Count > 0)
                {
                    Console.WriteLine($"Cleaning up {oldFiles.Count} CSV files older than {ConfigurationManager.LogRetentionDays} days...");
                    
                    // Delete old files
                    foreach (var file in oldFiles)
                    {
                        try
                        {
                            // Check for cancellation
                            cancellationToken.ThrowIfCancellationRequested();
                            
                            // Delete the file
                            file.Delete();
                            
                            // Pause briefly to avoid overwhelming the file system
                            await Task.Delay(20, cancellationToken);
                        }
                        catch (OperationCanceledException)
                        {
                            throw; // Rethrow cancellation exception
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Failed to delete old CSV file {file.Name}: {ex.Message}");
                        }
                    }
                    
                    Console.WriteLine("CSV cleanup completed.");
                }
            }
            catch (OperationCanceledException)
            {
                // Just bubble up cancellation exceptions
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during CSV cleanup: {ex.Message}");
            }
        }
    }
}
```

### 主要變更：

1. **簡化的 CSV 格式**
   - CSV 只包含 4 個欄位：時間、進程名稱、CPU%、記憶體%
   - 每行代表一個時間點的一個進程，方便資料分析

2. **CSV 報告生成**
   - 使用 `GenerateSimplifiedCSVReport` 方法生成簡化的 CSV
   - 只在新檔案建立時添加欄位標題行
   - 每個進程資料使用相同的時間戳，便於分析同一時間點的不同進程

3. **控制台輸出改進**
   - 為控制台輸出添加了美化的格式化顯示
   - 顯示進程名稱、CPU% 和記憶體% 的列表
   - 添加了分隔線和標題，提高可讀性

4. **性能優化**
   - 直接將 CSV 資料寫入檔案，不使用中間字串拼接
   - 使用 `StringBuilder` 來高效拼接 CSV 字串

這個更新使得程式的 CSV 輸出更簡潔、更專注於重