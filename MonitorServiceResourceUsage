好的，我將按照您的要求，把 Process Name 和 PID 合併成 "ProcessName-PID" 格式作為第一個欄位（而不是用括號格式）。以下是更新的 ReportManager.cs 代碼：

```csharp
using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Collections.Generic;
using System.Globalization;

namespace ProcessMonitor
{
    /// <summary>
    /// Responsible for handling output of monitoring reports
    /// </summary>
    public class ReportManager
    {
        // Keep track of when we last cleaned up old logs
        private static DateTime _lastLogCleanupTime = DateTime.MinValue;
        
        /// <summary>
        /// Output a monitoring report to configured destinations
        /// </summary>
        /// <param name="processResources">The list of process resources to output</param>
        /// <param name="timestamp">Timestamp for the report</param>
        /// <param name="cancellationToken">Cancellation token</param>
        public async Task OutputReportAsync(List<ProcessResourceInfo> processResources, 
                                           DateTime timestamp, 
                                           CancellationToken cancellationToken)
        {
            // Generate CSV records for current processes
            string csvRecords = GenerateCSVRecords(processResources, timestamp);
            
            // Output to console if configured
            if (ConfigurationManager.OutputToConsole)
            {
                OutputToConsole(processResources, timestamp);
            }
            
            // Output to file if configured
            if (ConfigurationManager.OutputToFile)
            {
                await AppendToCSVFileAsync(csvRecords, timestamp, cancellationToken);
                
                // Clean up old log files once per day
                if ((DateTime.Now - _lastLogCleanupTime).TotalHours >= 24)
                {
                    await CleanupOldLogsAsync(cancellationToken);
                    _lastLogCleanupTime = DateTime.Now;
                }
            }
        }
        
        /// <summary>
        /// Generates CSV records with columns: time, ProcessName-PID, CPU%, memory%
        /// </summary>
        private string GenerateCSVRecords(List<ProcessResourceInfo> processResources, DateTime timestamp)
        {
            StringBuilder csv = new StringBuilder();
            
            // Get the timestamp as string
            string timeString = timestamp.ToString("yyyy-MM-dd HH:mm:ss");
            
            // Sort processes by CPU usage and take top N
            var topProcesses = processResources
                .OrderByDescending(p => p.CpuUsage)
                .Take(ConfigurationManager.ProcessCount)
                .ToList();
            
            // Add each process data row
            foreach (var proc in topProcesses)
            {
                // Format process name with PID using hyphen
                string processNameWithPid = $"{proc.ProcessName}-{proc.ProcessId}";
                
                csv.AppendLine(
                    $"{timeString}," +
                    $"{EscapeCSV(processNameWithPid)}," +
                    $"{proc.CpuUsage.ToString("F2", CultureInfo.InvariantCulture)}," +
                    $"{proc.MemoryUsagePercent.ToString("F2", CultureInfo.InvariantCulture)}");
            }
            
            return csv.ToString();
        }
        
        /// <summary>
        /// Escape a string for CSV format
        /// </summary>
        private string EscapeCSV(string field)
        {
            if (string.IsNullOrEmpty(field))
                return string.Empty;
                
            // If the field contains a comma, newline, or quote, wrap it in quotes
            if (field.Contains(",") || field.Contains("\"") || field.Contains("\r") || field.Contains("\n"))
            {
                // Replace any quotes with double quotes
                field = field.Replace("\"", "\"\"");
                
                // Wrap the field in quotes
                return $"\"{field}\"";
            }
            
            return field;
        }
        
        /// <summary>
        /// Output the monitoring results to the console in a readable format
        /// </summary>
        private void OutputToConsole(List<ProcessResourceInfo> processResources, DateTime timestamp)
        {
            try
            {
                Console.Clear();
                Console.WriteLine("Process Resource Monitor - Top Processes");
                Console.WriteLine($"Time: {timestamp.ToString("yyyy-MM-dd HH:mm:ss")}");
                Console.WriteLine("--------------------------------------------------");
                Console.WriteLine("Process Name-PID                CPU%      Memory%");
                Console.WriteLine("--------------------------------------------------");
                
                // Sort and display processes by CPU usage
                var topProcesses = processResources
                    .OrderByDescending(p => p.CpuUsage)
                    .Take(ConfigurationManager.ProcessCount);
                
                foreach (var proc in topProcesses)
                {
                    // Format process name with PID using hyphen
                    string processNameWithPid = $"{proc.ProcessName}-{proc.ProcessId}";
                    
                    if (processNameWithPid.Length > 28)
                        processNameWithPid = processNameWithPid.Substring(0, 25) + "...";
                        
                    Console.WriteLine($"{processNameWithPid.PadRight(30)} {proc.CpuUsage.ToString("F2").PadRight(10)} {proc.MemoryUsagePercent.ToString("F2")}");
                }
                
                Console.WriteLine("--------------------------------------------------");
                Console.WriteLine($"Next update in {ConfigurationManager.MonitorIntervalSeconds} seconds");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error writing to console: {ex.Message}");
            }
        }
        
        /// <summary>
        /// Append the records to a CSV file
        /// </summary>
        private async Task AppendToCSVFileAsync(string csvRecords, DateTime timestamp, CancellationToken cancellationToken)
        {
            try
            {
                // Ensure log directory exists
                if (!Directory.Exists(ConfigurationManager.LogFolderPath))
                {
                    try
                    {
                        Directory.CreateDirectory(ConfigurationManager.LogFolderPath);
                        Console.WriteLine($"Created log directory: {ConfigurationManager.LogFolderPath}");
                    }
                    catch (Exception dirEx)
                    {
                        Console.WriteLine($"Failed to create log directory: {dirEx.Message}");
                        return; // Cannot proceed without a log directory
                    }
                }
                
                // Create timestamped filename with CSV extension
                string filename = $"ProcessMonitor_{timestamp.ToString("yyyy-MM-dd")}.csv";
                string filePath = Path.Combine(ConfigurationManager.LogFolderPath, filename);
                
                // Check if we need to add headers (only for new files)
                bool isNewFile = !File.Exists(filePath) || new FileInfo(filePath).Length == 0;
                
                // Open file for append
                using (StreamWriter writer = new StreamWriter(filePath, true, Encoding.UTF8))
                {
                    // Add header if this is a new file
                    if (isNewFile)
                    {
                        await writer.WriteLineAsync("Time,ProcessName-PID,CPU%,Memory%");
                    }
                    
                    // Append the records
                    await writer.WriteAsync(csvRecords);
                    await writer.FlushAsync();
                }
                
                Console.WriteLine($"Records appended to: {filePath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error appending to CSV file: {ex.Message}");
            }
        }
        
        /// <summary>
        /// Clean up CSV files older than the retention period
        /// </summary>
        private async Task CleanupOldLogsAsync(CancellationToken cancellationToken)
        {
            try
            {
                // Calculate the cutoff date for log retention
                DateTime cutoffDate = DateTime.Now.AddDays(-ConfigurationManager.LogRetentionDays);
                
                // Get all CSV files
                DirectoryInfo logDir = new DirectoryInfo(ConfigurationManager.LogFolderPath);
                if (!logDir.Exists)
                    return;
                
                // Find files older than the cutoff date
                var oldFiles = logDir.GetFiles("ProcessMonitor_*.csv")
                    .Where(f => f.LastWriteTime < cutoffDate)
                    .ToList();
                
                if (oldFiles.Count > 0)
                {
                    Console.WriteLine($"Cleaning up {oldFiles.Count} CSV files older than {ConfigurationManager.LogRetentionDays} days...");
                    
                    // Delete old files
                    foreach (var file in oldFiles)
                    {
                        try
                        {
                            // Check for cancellation
                            cancellationToken.ThrowIfCancellationRequested();
                            
                            // Delete the file
                            file.Delete();
                            
                            // Pause briefly to avoid overwhelming the file system
                            await Task.Delay(20, cancellationToken);
                        }
                        catch (OperationCanceledException)
                        {
                            throw; // Rethrow cancellation exception
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Failed to delete old CSV file {file.Name}: {ex.Message}");
                        }
                    }
                    
                    Console.WriteLine("CSV cleanup completed.");
                }
            }
            catch (OperationCanceledException)
            {
                // Just bubble up cancellation exceptions
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during CSV cleanup: {ex.Message}");
            }
        }
    }
}
```

### 變更摘要：

1. **進程名稱格式**
   - 將進程名稱和 PID 使用連字符連接為 "ProcessName-PID" 格式
   - 應用於 CSV 輸出和控制台顯示

2. **CSV 標題更新**
   - 將 CSV 標題列改為 "Time,ProcessName-PID,CPU%,Memory%"
   - 反映了資料欄位的實際格式

3. **控制台輸出**
   - 更新控制台標題為 "Process Name-PID"
   - 顯示格式保持一致，使用連字符分隔進程名稱和 PID

這種格式更簡潔，且符合您的需求。使用連字符 (-) 將進程名稱和 PID 連接起來，可以在 Excel 中更輕鬆地過濾和排序，同時保持資料的完整性。每一行資料仍然包含四個欄位：時間、進程名稱-PID、CPU 百分比和記憶體百分比。