CREATE TABLE IF NOT EXISTS account_balances (
    account_id BIGINT PRIMARY KEY,
    balance NUMERIC NOT NULL DEFAULT 0,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL
);


CREATE TABLE IF NOT EXISTS transaction_logs (
    log_id SERIAL PRIMARY KEY,
    account_id BIGINT NOT NULL,
    amount NUMERIC NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL
);




using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Npgsql;
using NpgsqlTypes;

namespace BatchProcessInCSharp
{
    class Program
    {
        static async Task Main(string[] args)
        {
            // 数据库连接字符串
            string connectionString = "Host=localhost;Port=5432;Username=your_username;Password=your_password;Database=your_database;MaxPoolSize=200";

            // 并发任务数量
            int concurrentTasks = 100; // 可调整

            // 每个任务处理的交易数量
            int transactionsPerTask = 10; // 可调整

            // 创建并发任务列表
            List<Task> tasks = new List<Task>();

            for (int i = 0; i < concurrentTasks; i++)
            {
                int taskId = i;

                tasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        // 生成测试数据
                        var accountIds = new List<long>();
                        var amounts = new List<decimal>();

                        Random rand = new Random(GetRandomSeed());

                        for (int j = 0; j < transactionsPerTask; j++)
                        {
                            accountIds.Add(rand.Next(1, 50)); // 假设有 50 个账户 ID
                            amounts.Add((decimal)(rand.NextDouble() * 2000 - 1000)); // 随机金额，可能为负值
                        }

                        // 调用批量处理函数
                        var results = await BatchProcessTransactionsAsync(connectionString, accountIds, amounts);

                        // 输出结果
                        foreach (var result in results)
                        {
                            Console.WriteLine($"Task {taskId}: Account {result.AccountId}, Success: {result.Success}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Task {taskId} encountered an error: {ex.Message}");
                    }
                }));
            }

            // 等待所有任务完成
            await Task.WhenAll(tasks);

            Console.WriteLine("All tasks completed.");
        }

        // 线程安全的随机数种子生成
        private static Random globalRand = new Random();
        private static object randLock = new object();

        private static int GetRandomSeed()
        {
            lock (randLock)
            {
                return globalRand.Next();
            }
        }

        // 批量处理函数
        public static async Task<List<(long AccountId, bool Success)>> BatchProcessTransactionsAsync(string connectionString, List<long> accountIds, List<decimal> amounts)
        {
            if (accountIds.Count != amounts.Count)
                throw new ArgumentException("accountIds and amounts must have the same length.");

            var results = new List<(long AccountId, bool Success)>();

            using (var conn = new NpgsqlConnection(connectionString))
            {
                await conn.OpenAsync();

                using (var transaction = conn.BeginTransaction())
                {
                    try
                    {
                        // 构建用于批量更新余额的 SQL 和参数
                        var updateBalanceSql = @"
                            INSERT INTO account_balances (account_id, balance, updated_at)
                            VALUES ";

                        var updateBalanceParams = new List<NpgsqlParameter>();

                        for (int i = 0; i < accountIds.Count; i++)
                        {
                            updateBalanceSql += $"(@account_id_{i}, @amount_{i}, CURRENT_TIMESTAMP)";

                            if (i < accountIds.Count - 1)
                                updateBalanceSql += ", ";
                            else
                                updateBalanceSql += " ";

                            updateBalanceParams.Add(new NpgsqlParameter($"@account_id_{i}", NpgsqlDbType.Bigint) { Value = accountIds[i] });
                            updateBalanceParams.Add(new NpgsqlParameter($"@amount_{i}", NpgsqlDbType.Numeric) { Value = amounts[i] });
                        }

                        updateBalanceSql += @"
                            ON CONFLICT (account_id) DO UPDATE SET
                                balance = account_balances.balance + EXCLUDED.balance,
                                updated_at = EXCLUDED.updated_at
                            RETURNING account_id;
                        ";

                        // 执行更新余额的命令
                        using (var cmd = new NpgsqlCommand(updateBalanceSql, conn, transaction))
                        {
                            cmd.Parameters.AddRange(updateBalanceParams.ToArray());

                            var reader = await cmd.ExecuteReaderAsync();

                            var updatedAccounts = new HashSet<long>();

                            while (await reader.ReadAsync())
                            {
                                long accountId = reader.GetInt64(0);
                                updatedAccounts.Add(accountId);
                            }

                            await reader.CloseAsync();

                            // 记录处理成功的账户
                            foreach (var accountId in updatedAccounts)
                            {
                                results.Add((accountId, true));
                            }
                        }

                        // 构建用于批量插入交易日志的 SQL 和参数
                        var insertLogSql = @"
                            INSERT INTO transaction_logs (account_id, amount, created_at)
                            VALUES ";

                        var insertLogParams = new List<NpgsqlParameter>();

                        for (int i = 0; i < accountIds.Count; i++)
                        {
                            insertLogSql += $"(@log_account_id_{i}, @log_amount_{i}, CURRENT_TIMESTAMP)";

                            if (i < accountIds.Count - 1)
                                insertLogSql += ", ";
                            else
                                insertLogSql += "; ";

                            insertLogParams.Add(new NpgsqlParameter($"@log_account_id_{i}", NpgsqlDbType.Bigint) { Value = accountIds[i] });
                            insertLogParams.Add(new NpgsqlParameter($"@log_amount_{i}", NpgsqlDbType.Numeric) { Value = amounts[i] });
                        }

                        // 执行插入日志的命令
                        using (var cmd = new NpgsqlCommand(insertLogSql, conn, transaction))
                        {
                            cmd.Parameters.AddRange(insertLogParams.ToArray());

                            await cmd.ExecuteNonQueryAsync();
                        }

                        // 提交事务
                        await transaction.CommitAsync();
                    }
                    catch (Exception)
                    {
                        // 回滚事务
                        await transaction.RollbackAsync();
                        throw;
                    }
                }

                await conn.CloseAsync();
            }

            return results;
        }
    }
}


