using System;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas.Parser;
using Ghostscript.NET;
using Ghostscript.NET.Rasterizer;

namespace PdfToPngConverter
{
    class Program
    {
        static void Main(string[] args)
        {
            // 設置PDF路徑和輸出目錄
            string pdfPath = @"C:\path\to\your\document.pdf";  // 請替換為您的PDF文件路徑
            string outputFolder = @"C:\path\to\output\folder";  // 請替換為您的輸出目錄路徑
            
            // 調用轉換方法
            ConvertPdfToPngUsingGhostscript(pdfPath, outputFolder);
            
            Console.WriteLine("轉換完成，按任意鍵退出...");
            Console.ReadKey();
        }
        
        /// <summary>
        /// 使用Ghostscript將PDF文件轉換為PNG圖片，保留表格和表單文字
        /// </summary>
        /// <param name="pdfPath">PDF文件的路徑</param>
        /// <param name="outputFolder">輸出PNG圖片的文件夾路徑</param>
        /// <param name="dpi">輸出圖片的DPI值，預設為300</param>
        public static void ConvertPdfToPngUsingGhostscript(string pdfPath, string outputFolder, int dpi = 300)
        {
            // 檢查PDF文件是否存在
            if (!File.Exists(pdfPath))
            {
                throw new FileNotFoundException("找不到指定的PDF文件", pdfPath);
            }
            
            // 確保輸出目錄存在
            if (!Directory.Exists(outputFolder))
            {
                Directory.CreateDirectory(outputFolder);
            }
            
            try
            {
                // 首先使用iText7獲取頁數
                using (PdfReader reader = new PdfReader(pdfPath))
                using (PdfDocument pdfDoc = new PdfDocument(reader))
                {
                    int pageCount = pdfDoc.GetNumberOfPages();
                    Console.WriteLine($"PDF文件共有 {pageCount} 頁");
                    
                    // 然後使用Ghostscript進行渲染
                    using (GhostscriptRasterizer rasterizer = new GhostscriptRasterizer())
                    {
                        // 加載PDF文件
                        rasterizer.Open(pdfPath);
                        
                        // 處理每一頁
                        for (int pageIndex = 1; pageIndex <= pageCount; pageIndex++)
                        {
                            Console.WriteLine($"正在處理第 {pageIndex} 頁");
                            
                            // 渲染頁面為圖像，使用指定的DPI
                            using (Image image = rasterizer.GetPage(dpi, dpi, pageIndex))
                            {
                                // 轉換為位圖
                                using (Bitmap bitmap = new Bitmap(image))
                                {
                                    // 創建輸出文件路徑
                                    string outputPath = Path.Combine(outputFolder, $"page-{pageIndex}.png");
                                    
                                    // 保存為PNG，使用高質量設置
                                    using (EncoderParameters encoderParams = new EncoderParameters(1))
                                    {
                                        encoderParams.Param[0] = new EncoderParameter(Encoder.Quality, 100L);
                                        ImageCodecInfo pngEncoder = GetEncoder(ImageFormat.Png);
                                        bitmap.Save(outputPath, pngEncoder, encoderParams);
                                    }
                                    
                                    Console.WriteLine($"已保存: {outputPath}");
                                }
                            }
                        }
                    }
                    
                    Console.WriteLine($"全部 {pageCount} 頁已轉換完成");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"轉換過程中發生錯誤: {ex.Message}");
                throw;
            }
        }
        
        /// <summary>
        /// 獲取指定格式的編碼器
        /// </summary>
        private static ImageCodecInfo GetEncoder(ImageFormat format)
        {
            ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();
            foreach (ImageCodecInfo codec in codecs)
            {
                if (codec.FormatID == format.Guid)
                {
                    return codec;
                }
            }
            return null;
        }
    }
}