using System;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using Bblanchon.Pdfium;

namespace PdfToPngConverter
{
    class Program
    {
        static void Main(string[] args)
        {
            // 設置PDF路徑和輸出目錄
            string pdfPath = @"C:\path\to\your\document.pdf";  // 請替換為您的PDF文件路徑
            string outputFolder = @"C:\path\to\output\folder";  // 請替換為您的輸出目錄路徑
            
            // 調用轉換方法
            ConvertPdfToPng(pdfPath, outputFolder);
            
            Console.WriteLine("轉換完成，按任意鍵退出...");
            Console.ReadKey();
        }
        
        /// <summary>
        /// 使用Bblanchon.Pdfium將PDF文件轉換為PNG圖片
        /// </summary>
        /// <param name="pdfPath">PDF文件的路徑</param>
        /// <param name="outputFolder">輸出PNG圖片的文件夾路徑</param>
        /// <param name="dpi">輸出圖片的DPI值，預設為300</param>
        public static void ConvertPdfToPng(string pdfPath, string outputFolder, int dpi = 300)
        {
            // 檢查PDF文件是否存在
            if (!File.Exists(pdfPath))
            {
                throw new FileNotFoundException("找不到指定的PDF文件", pdfPath);
            }
            
            // 確保輸出目錄存在
            if (!Directory.Exists(outputFolder))
            {
                Directory.CreateDirectory(outputFolder);
            }
            
            // 計算縮放系數 (PDF默認使用72 DPI)
            float scale = dpi / 72f;
            
            try
            {
                // 初始化PDFium庫
                Pdfium.Init();
                
                // 加載PDF文件
                using (var document = new PdfDocument(pdfPath))
                {
                    // 獲取PDF頁數
                    int pageCount = document.Pages.Count;
                    Console.WriteLine($"PDF文件共有 {pageCount} 頁");
                    
                    // 處理每一頁
                    for (int pageIndex = 0; pageIndex < pageCount; pageIndex++)
                    {
                        // 獲取頁面
                        using (var page = document.Pages[pageIndex])
                        {
                            // 獲取頁面尺寸（點為單位）
                            float widthInPoints = page.Width;
                            float heightInPoints = page.Height;
                            
                            // 計算像素尺寸
                            int width = (int)(widthInPoints * scale);
                            int height = (int)(heightInPoints * scale);
                            
                            Console.WriteLine($"正在處理第 {pageIndex + 1} 頁，尺寸: {width}x{height}");
                            
                            // 創建位圖
                            using (Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format32bppArgb))
                            {
                                // 將位圖鎖定到系統內存中
                                BitmapData bitmapData = bitmap.LockBits(
                                    new Rectangle(0, 0, width, height),
                                    ImageLockMode.ReadWrite,
                                    PixelFormat.Format32bppArgb);
                                
                                try
                                {
                                    // 設置渲染標誌
                                    var flags = RenderingFlags.Annotations |
                                               RenderingFlags.LcdText |  // 使用LCD文字優化
                                               RenderingFlags.PrintPreview; // 使用打印預覽模式
                                    
                                    // 渲染頁面到位圖
                                    page.Render(
                                        bitmapData.Scan0, 
                                        width, 
                                        height, 
                                        bitmapData.Stride, 
                                        scale,  // 使用DPI縮放比例
                                        flags);
                                }
                                finally
                                {
                                    // 解鎖位圖
                                    bitmap.UnlockBits(bitmapData);
                                }
                                
                                // 創建輸出文件路徑
                                string outputPath = Path.Combine(outputFolder, $"page-{pageIndex + 1}.png");
                                
                                // 使用高質量設置保存為PNG
                                using (var encoderParams = new EncoderParameters(1))
                                {
                                    encoderParams.Param[0] = new EncoderParameter(Encoder.Quality, 100L);
                                    ImageCodecInfo pngEncoder = GetEncoder(ImageFormat.Png);
                                    
                                    // 保存圖像
                                    bitmap.Save(outputPath, pngEncoder, encoderParams);
                                }
                                
                                Console.WriteLine($"已保存: {outputPath}");
                            }
                        }
                    }
                    
                    Console.WriteLine($"全部 {pageCount} 頁已轉換完成");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"轉換過程中發生錯誤: {ex.Message}");
                throw;
            }
            finally
            {
                // 釋放PDFium庫資源
                Pdfium.Shutdown();
            }
        }
        
        // 獲取編碼器方法
        private static ImageCodecInfo GetEncoder(ImageFormat format)
        {
            ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();
            foreach (ImageCodecInfo codec in codecs)
            {
                if (codec.FormatID == format.Guid)
                {
                    return codec;
                }
            }
            return null;
        }
    }
}